#!/bin/bash
TLSHOME="/etc/docker/tls"
BITS=2048
echo " => Ensuring config directory exists..."
if [ ! -d $TLSHOME ]; then
	mkdir $TLSHOME
fi
cd $TLSHOME
echo " => Verifying ca.srl"
if [ ! -f "ca.srl" ]; then
	echo " => Creating ca.srl"
	echo 01 > ca.srl
fi
# Check for ca-key.pem file
echo " => Verifying ca-key.pem"
if [ ! -f "ca-key.pem" ]; then
	echo " => Generating CA key"
	openssl genrsa -out ca-key.pem $BITS
fi
# Check for ca.pem file
	echo " => Verifying ca.pem"
if [ ! -f "ca.pem" ]; then
	echo " => Generating CA certificate"
	openssl req -new -key ca-key.pem -x509 -days 3650 -nodes -subj "/CN=$HOSTNAME" -out ca.pem
fi
# Create the certificates
if [ "$#" -gt 0 ]; then
	while [ $# -gt 0 ]; do
		# Check if we need to handle client or swarm reqs first."
		DOCKER_HOST=$1
		if [ "${DOCKER_HOST}" == "--client" ]; then
			echo " => Generating client key"
			openssl genrsa -out client-key.pem $BITS
			echo " => Generating client CSR"
			openssl req -subj "/CN=docker.client" -new -key client-key.pem -out client.csr
			echo " => Creating extended key usage"
			echo "extendedKeyUsage = clientAuth" > extfile.cnf
			echo " => Signing client CSR with CA"
			openssl x509 -req -days 3650 -in client.csr -CA ca.pem -CAkey ca-key.pem -out client-cert.pem -extfile extfile.cnf
		elif [ "${DOCKER_HOST}" == "--swarm" ]; then
			echo " => Generating swarm key"
			openssl genrsa -out swarm-key.pem $BITS
			echo " => Genereating swarm CSR"
			openssl req -subj "/CN=swarm.proserveau.local" -new -key swarm-key.pem -out swarm.csr
			echo " => Creating extended key usage"
			echo "extendedKeyUsage = clientAuth,serverAuth" > extfile.cnf
			echo " => Signing swarm CSR with CA"
			openssl x509 -req -days 3650 -in swarm.csr -CA ca.pem -CAkey ca-key.pem -out swarm-cert.pem -extfile extfile.cnf
		else
			echo " => Generating server key for ${DOCKER_HOST}."
			openssl genrsa -out $DOCKER_HOST-key.pem $BITS
			echo " => Generating server CSR"
			openssl req -subj "/CN=$DOCKER_HOST" -new -key ${DOCKER_HOST}-key.pem -out ${DOCKER_HOST}.csr
			echo " => Signing server CSR with CA"
			openssl x509 -req -days 3650 -in ${DOCKER_HOST}.csr -CA ca.pem -CAkey ca-key.pem -out ${DOCKER_HOST}-cert.pem
		fi
		shift
	done
else
	echo " => ERROR: You must specify the docker FQDN as the first arguement to this scripts! <="
	exit 1
fi
exit 0
